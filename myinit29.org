#+TITLE:Config pour emacs29
#+PROPERTY: header-args :tangle myinit29.el

** early init stuff
Use with caution!
#+begin_src elisp :tangle early-init.el
;; Remove earlier the graphical stuff
(message "enters early init")
(menu-bar-mode -1) ;; Cache la barre de menu
(scroll-bar-mode -1) ;; Supprimer les scroll bars
(tool-bar-mode -1) ;; Cache la barre d'outils
#+end_src
** Auto-generated config files
#+begin_src elisp
(setq custom-file (locate-user-emacs-file "custom.el"))
(load custom-file :no-error-if-file-is-missing)
#+end_src
** Packages
#+begin_src elisp
;; Packages
(require 'package)
(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/"))
;(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
;(package-initialize) ;; 2025-01-06 : inutile
;(package-refresh-contents t)

;; Remove warnings, from https://protesilaos.com/codelog/2024-11-28-basic-emacs-configuration/
(add-to-list 'display-buffer-alist
             '("\\`\\*\\(Warnings\\|Compile-Log\\)\\*\\'"
               (display-buffer-no-window)
               (allow-no-window . t)))

(custom-set-variables '(use-package-always-ensure t))
(custom-set-variables '(use-package-always-defer t))

(use-package auto-package-update
  :defer t
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00")
  (setq auto-package-update-delete-old-versions t))
#+end_src

** Paramètres
#+begin_src elisp
  (setq user-full-name "Alan Burlot")
  (setq user-mail-address "alan.burlot@proton.me")

  ;; = Dimension de la fenêtre au démarrage
  (setq initial-frame-alist (quote ((fullscreen . maximized))))
  (setq default-frame-alist (quote ((fullscreen . maximized)
  				  (scroll-bar-mode -1))))
  ;; = Ajout de dossiers au path d'emacs
  (add-to-list 'exec-path "~/MYCONFIG/SCRIPTS/")

  ;; Récupération de variables d'environnement
  (getenv "CPLUS_INCLUDE_PATH")

  ;; = Thème
  (use-package color-theme-sanityinc-tomorrow
    :ensure t)

  ;; = Options diverses
  (put 'narrow-to-region 'disabled nil) ;; pour activer C-x n n
  (setq inhibit-startup-screen t) ;; Désactive l'écran de démarrage
  (setq initial-scratch-message nil) ;; Désactive la doc dans *scratch*
  (load-theme 'sanityinc-tomorrow-night) ;; theme <3
  ;;(set-face-attribute 'default nil :height 110) ;; Taille de la police à 10pt
  (load-library "iso-transl") ;; Ajout pour utilisation de l'accent circonflexe
  (fset 'yes-or-no-p 'y-or-n-p) ;; 'yes' or 'no' => 'y' or 'n'
  (tooltip-mode -1) ;; Supprime les infosbulles, texte dans le mini buffer

  ;;(global-linum-mode t) ;; Affiche le numéro de ligne
  (delete-selection-mode 1)
  ;; (global-hl-line-mode 0); Highlight current row
  (setq ring-bell-function 'ignore) ;; Supprimer l'alarme (son et autre)
  (setq-default cursor-type 'bar) ;; Curseur rectangle -> barre
  (show-paren-mode 1) ;; Mise en surbrillance des parenthèses
  (setq show-paren-delay 0) ;; Ne pas attendre avant de mettre en surbrillance
  (setq-default fill-column 70) ;; Fill-column à 80
  (setq-default display-time-default-load-average nil) ;; Supprime la charge dans ml
  ;; (setq-default display-time-format "%H:%M") ;; format de l'heure
  ;; (setq-default select-enable-clipboard t) ;; Merge system and emacs clipboard
  (setq-default x-select-enable-clipboard-manager nil) ;; Arrêter de vouloir fusionner les clipboard
  (setq-default help-windows-select t) ;; focus sur la fenêtre d'aide
  (setq-default require-final-newline t) ;; ajoute une ligne à la fin du fichier
  (setq delete-trailing-whitespace t) ;; supprime les espaces en bout de ligne
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (electric-pair-mode)
  (setq-default indent-tabs-mode nil) ;; pas de tabulation !
  ;; (advice-add 'risky-local-variable-p :override #'ignore)
  (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
  (add-to-list 'display-buffer-alist ;; ne pop pas le buffer
  	     (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
  (setq warning-minimum-level :emergency) ;; met dans les log mais n'affiche pas si en dessous de emergency
  ;; (setq bookmark-set-fringe-mark 'bookmark-mark) ; nil n'a rien fait ?
  (setq gc-cons-threshold (* 256 1024 1024)) ;; trouver ici https://github.com/minad/consult/issues/329 pour limiter le temps de consult-line ?
  (setq frame-resize-pixelwise t) ;; to fit when half screen
  (repeat-mode)
  ;; Delete selection
  ;; (use-package delsel
  ;;   :ensure nil ; no need to install it as it is built-in
  ;;   :hook (after-init . delete-selection-mode))

#+end_src

*** dir locals
#+begin_src elisp

;; my dir locals
;(put 'project-vc-external-roots-function 'safe-local-variable #'stringp)

#+end_src
** Overloaded C-g
#+begin_src elisp
(defun prot/keyboard-quit-dwim ()
  "Do-What-I-Mean behaviour for a general `keyboard-quit'.

The generic `keyboard-quit' does not do the expected thing when
the minibuffer is open.  Whereas we want it to close the
minibuffer, even without explicitly focusing it.

The DWIM behaviour of this command is as follows:

- When the region is active, disable it.
- When a minibuffer is open, but not focused, close the minibuffer.
- When the Completions buffer is selected, close it.
- In every other case use the regular `keyboard-quit'."
  (interactive)
  (cond
   ((region-active-p)
    (keyboard-quit))
   ((derived-mode-p 'completion-list-mode)
    (delete-completion-window))
   ((> (minibuffer-depth) 0)
    (abort-recursive-edit))
   (t
    (keyboard-quit))))

(define-key global-map (kbd "C-g") #'prot/keyboard-quit-dwim)

#+end_src
** Sauvegardes
#+begin_src elisp
(setq backup-by-copying t)
(setq backup-directory-alist '(("." . "~/.saves"))
      delete-old-versions t
      kept-new-versions 2
      kept-old-versions 2
      version-control t)
#+end_src

** Fonctions
*** Tentative d'une fonction pour définir un projet externe
On définit =my-external-roots= dans un =.dir-locals.el=.
#+begin_src elisp
;; By GPT!
(defun my-project-vc-external-roots ()
  "Return a list of external roots for the project from `my-external-roots`."
  (or (and (boundp 'my-external-roots) my-external-roots)
      (list)))  ;; Fallback to an empty list if the variable is not set

#+end_src
*** Tentative d'une fonction pour les linked projects
#+begin_src elisp
(defvar projectile-linked-projects nil
  "List of locations of linked projects.

Should be set in a .dir-locals.el")

(defun projectile-linked-project-files ()
  "Get a list of all files in current and linked projects."
  (cl-mapcan
   (lambda (project)
     (when (file-exists-p project)
       (mapcar (lambda (file)
                 (expand-file-name file project))
               (projectile-project-files project))))
   (list (projectile-project-root) projectile-linked-projects)))

(defun projectile-find-file-in-linked-projects ()
  "Jump to a file in the current or linked projects."
  (interactive)
  (find-file (projectile-completing-read "Find file in projects: " (projectile-linked-project-files))))
#+end_src
*** Recharger les dir locals
#+begin_src elisp :tangle no
(defun my-reload-dir-locals-for-current-buffer ()
  "reload dir locals for the current buffer"
  (interactive)
  (let ((enable-local-variables :all))
    (hack-dir-local-variables-non-file-buffer)))


#+end_src

*** Toutes les autres fonctions
#+begin_src elisp
;; = Revert buffer sans confirmation
(defun revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive) (revert-buffer t t))

;; = Commenter une région ou une ligne
(defun comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
	(setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)
    (when (comment-only-p beg end)
      (next-logical-line))))

;; = Incrémenter le nombre sur le curseur.
(defun my-increment-number-decimal (&optional arg)
  "Increment the number forward from point by 'arg'."
  (interactive "p*")
  (save-excursion
    (save-match-data
      (let (inc-by field-width answer)
	(setq inc-by (if arg arg 1))
	(skip-chars-backward "0123456789")
	(when (re-search-forward "[0-9]+" nil t)
	  (setq field-width (- (match-end 0) (match-beginning 0)))
	  (setq answer (+ (string-to-number (match-string 0) 10) inc-by))
	  (when (< answer 0)
	    (setq answer (+ (expt 10 field-width) answer)))
	  (replace-match (format (concat "%0" (int-to-string field-width) "d")
				 answer)))))))
(global-set-key (kbd "C-c +") 'my-increment-number-decimal)

;; = Décrémenter le nombre sur le curseur
(defun my-decrement-number-decimal (&optional arg)
  "Decrement the number at point"
  (interactive "p*")
  (my-increment-number-decimal (if arg (- arg) -1)))
(global-set-key (kbd "C-c -") 'my-decrement-number-decimal)

;; = Renommer à la fois le fichier et le buffer correspondant.
(defun rename-file-and-buffer ()
  "Rename the current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
	(message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
	(cond
	 ((vc-backend filename) (vc-rename-file filename new-name))
	 (t
	  (rename-file filename new-name t)
	  (set-visited-file-name new-name t t)))))))
(global-set-key (kbd "C-c r")  'rename-file-and-buffer)

;; = Afficher rapidement le répertoire du buffer courant
(defun fnd ()
  (interactive)
  (file-name-directory buffer-file-name))

;; = Gestion intelligente du retour en début de ligne
(defun my/smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))
;; remap C-a to `smarter-move-beginning-of-line'
(global-set-key [remap move-beginning-of-line]
		'my/smarter-move-beginning-of-line)

;; = Function pour copier une ligne ou une région

;; Fonction trouvée sur stackexchange pour la thèse
;; (defun tex-custom-compile (arg)
;;   (interactive "P")
;;   "Calls `~/bin/maketex' on file associated with current buffer. With C-u calls `~/bin/maketex' instead"
;;   (let (script texFile)
;;     (cond
;;      ((equal arg '(4)) (setq script "~/bin/maketex -b these"))
;;      (t (setq script "~/bin/maketex -b these")))
;;     (async-shell-command (concat script ) ) )
;;   ;;(delete-windows-on "*Async Shell Command*")
;; )

;; Fonction pour publier le blog
(defun my/publish-org-blog ()
  ;; Évaluer le buffer de configuration my-website.el Appel de la
  ;; fonction publish Comment l'appeler ? Faire une option qui force
  ;; la publication complète, une option qui ne publie que les
  ;; modifications. C'est l'usage standard quand on fait C-c C-e P a.
  )

;; Bascule le terminal dans le répertoire courant
(defun my/localTerm ()
  (interactive)
  (setq buff-repo (file-name-directory buffer-file-name))
  (message buff-repo)
  (switch-to-buffer "*ANSI-TERM*")
  (term-line-mode)
  (end-of-buffer)
  (insert (concat "cd " buff-repo))
  (term-send-input)
  (end-of-buffer)
  (insert "clear")
  (term-send-input)
  (term-char-mode))

;; Exporte la bibliographie et le pdf de BiblioPhilo.org
(defun my/export-tangle-biblio-philo ()
  (interactive)
  (org-babel-tangle)
  ;; (setq org-export-in-background t)
  ;; (org-latex-export-to-pdf)
  )

;; Toggle entre line-mode et char-mode dans term
;; https://joelmccracken.github.io/entries/switching-between-term-mode-and-line-mode-in-emacs-term/
(require 'term)
(defun my/term-toggle-mode ()
  "Toggles term between line mode and char mode."
  (interactive)
  (if (term-in-line-mode)
      (term-char-mode)
    (term-line-mode)))

(define-key term-mode-map (kbd "C-c C-t") 'my/term-toggle-mode)
(define-key term-raw-map (kbd "C-c C-t") 'my/term-toggle-mode)

;; Une série de fonctions d'alignement
;; http://pragmaticemacs.com/emacs/aligning-text/
(defun my/align-whitespace (start end)
  "Align columns by whitespace"
  (interactive "r")
  (align-regexp start end
		"\\(\\s-*\\)\\s-" 1 0 t))

(defun my/align-& (start end)
  "Align columns by ampersand"
  (interactive "r")
  (align-regexp start end
		"\\(\\s-*\\)&" 1 1 t))

(defun my/align-commaA (start end)
  "Align columns by comma"
  (interactive "r")
  (align-regexp start end
		"\\(\\s-*\\)," 1 1 t))

(defun my/align-commaB (start end)
  "Align columns by comma"
  (interactive "r")
  (align-regexp start end
		",\\(\\s-*\\)" 1 1 t))

(defun my/align-pv (start end)
  "Align columns by point-virgule"
  (interactive "r")
  (align-regexp start end
		"\\(\\s-*\\);" 1 1 t))

;; Fonction qui insère un Bibtex
;; https://www.anghyflawn.net/blog/2014/emacs-give-a-doi-get-a-bibtex-entry/
(defun my/get-bibtex-from-doi (doi)
  "Get a BibTeX entry from the DOI"
  (interactive "MDOI: ")
  (let ((url-mime-accept-string "text/bibliography;style=bibtex"))
    (with-current-buffer
	(url-retrieve-synchronously
	 (format "https://doi.org/%s"
		 (replace-regexp-in-string "https://doi.org/" "" doi)))
      (switch-to-buffer (current-buffer))
      (goto-char (point-max))
      (setq bibtex-entry
	    (buffer-substring
	     (string-match "@" (buffer-string))
	     (point)))
      (kill-buffer (current-buffer))))
  (insert "*** SRC                                                            :noexport:")
  (newline)
  (insert "#+begin_src bibtex")
  (newline)
  (insert (decode-coding-string bibtex-entry 'utf-8))
  (bibtex-fill-entry)
  (newline)
  (insert "#+end_src")
  (previous-line))

;; Ouvrir crontab directement depuis emacs
;; https://emacs.stackexchange.com/questions/10077/how-to-edit-crontab-directly-within-emacs-when-i-already-have-emacs-open
(defun crontab-e ()
  "Run `crontab -e' in a emacs buffer."
  (interactive)
  (with-editor-async-shell-command "crontab -e"))

;; macro
(fset '\"addpage\"
      (kmacro-lambda-form [?\M-b ?| ?p ?a ?g ?e ?= ?\C-  ?\M-f ?\{ ?\C-  ?\M-f ?\{ ?p ?l ?i ?| ?\M-f ?1 ?0 backspace backspace ?| ?1 ?0 ?\C-e ?\} ?\} ?\C-n ?\C-e] 0 "%d"))

(fset '\"addsc\"
      (kmacro-lambda-form [?\C-  ?\M-f ?\{ ?\C-  ?\M-f ?\{ ?s ?c ?| ?\C-a ?\C-n] 0 "%d"))

#+end_src
** Raccourcis
#+begin_src elisp
  ;;; = Keyboard shortcuts
;; F1 : active l'aide (C-h)
;; F2 : copier la ligne
(global-set-key (kbd "<f2> <f2>") (lambda ()
				    (interactive)
				    (switch-to-buffer "*ANSI-TERM*")))
(global-set-key (kbd "<f2> i") 'insert-char) ;; Insérer un caractère unicode
(global-set-key (kbd "<f2> l") 'my/localTerm)
(global-set-key (kbd "<f2> p") 'org-publish-project)
;; F3 : enregistrement d'une macro
;; F4 : exécution de la macro
(global-set-key (kbd "<f5> <f5>") 'revert-buffer-no-confirm) ;; Comment / décommenter une région
;; (global-set-key [f6] 'split-window-vertically) ;; Raccourci pour séparation verticale (haut bas)
;; (global-set-key [f7] 'split-window-horizontally) ;; Raccourci pour séparation horizontale (gauche droite)
(global-set-key [f8] 'revert-buffer-no-confirm) ;; recharger le fichier depuis le disque (sans confirmation)

(global-set-key (kbd "C-c <f9>") 'symbol-overlay-put)
(global-set-key (kbd "<f9>") 'symbol-overlay-jump-next)
;; (global-set-key [(shift f9)] 'highlight-symbol-prev)
;; (global-set-key [(meta f9)] 'highlight-symbol-query-replace)
;; F10 : ouvre le menu d'emacs
(global-set-key [f12] 'comment-or-uncomment-region-or-line)

(global-set-key [C-M-tab] 'other-window) ;; Naviguer entre fenetre
(global-set-key [C-M-S-iso-lefttab] (kbd "\C-u -\C-x o")) ;; Fenêtre précédente
;(global-set-key (kbd "C-x p") (kbd "\C-u -\C-x o"))

;; tab-bar-mode
(global-set-key (kbd "C-<prior>") 'tab-bar-switch-to-prev-tab)
(global-set-key (kbd "C-<next>") 'tab-bar-switch-to-next-tab)

;; Déplacement avec les flèches
(global-set-key (kbd "C-M-s-<up>") 'windmove-up)
(global-set-key (kbd "C-M-s-<down>") 'windmove-down)
(global-set-key (kbd "C-M-s-<right>") 'windmove-right)
(global-set-key (kbd "C-M-s-<left>") 'windmove-left)

;; Déplacer l'écran de 5 lignes vers le bas
;; (global-set-key (kbd "M-n") (lambda ()
;; 			      (interactive)
;; 			      (forward-line 5)
;; 			      (recenter)))
(global-set-key (kbd "M-n") 'flymake-goto-next-error)

;; Déplacer l'écran de 5 lignes vers le haut
;; (global-set-key (kbd "M-p") (lambda ()
;; 			      (interactive)
;; 			      (forward-line -5)
;; 			      (recenter)))
(global-set-key (kbd "M-p") 'flymake-goto-previous-error)

(global-set-key "\C-c\C-d" "\C-a\C- \C-e\M-w\C-m\C-a\C-y") ;; Duplique une ligne entière

(global-set-key "\C-c\C-c\C-c" "\C-a\C- \C-e\M-w") ;; Copie la ligne actuelle

(global-set-key (kbd "C-c r") 'org-capture)
;; Remplacer le listing de buffer classique par ibuffer
(global-set-key (kbd "C-x C-b") 'ibuffer)
(autoload 'ibuffer "ibuffer" "List buffers." t)

(global-set-key (kbd "C-c M-d") 'backward-kill-word)

;; My universal key
(global-set-key (kbd "C-M-s-f b") 'ibuffer)

;; Toggle le code folding rapidement
(global-set-key [C-tab] 'hs-toggle-hiding)

;; Raccourci lié à ivy
;; (global-set-key (kbd "M-x") 'counsel-M-x)
;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)
;; (global-set-key (kbd "C-s") 'swiper-isearch)
;; (global-set-key (kbd "M-y") 'counsel-yank-pop)
;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
;; (global-set-key (kbd "<f1> l") 'counsel-find-library)
;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
;; (global-set-key (kbd "<f2> j") 'counsel-set-variable)
;; (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
;; (global-set-key (kbd "C-c v") 'ivy-push-view)
;; (global-set-key (kbd "C-c V") 'ivy-pop-view)
;; (global-set-key (kbd "C-c b") 'counsel-bookmark)

(global-set-key (kbd "C-x g ") 'magit-status)
  ;;; = Undefined

(global-set-key (kbd "<C-M-backspace>") 'previous-buffer)

(global-unset-key (kbd "C-z"))
;; (global-set-key [C-f1] ') ;; Raccourci pour activer outline-minor-mode
;; Sous Gnome, M-f1 ouvre le menu application
;; (global-set-key [s-f1] ')

;; Raccourci pour renommer la fenêtre
;; (global-set-key [C-f2] ')
;; Sous Gnome, M-f2 ouvre la boîte de dialogue pour lancer une application
;; (global-set-key [s-f2] 'connect-sator)

;; (global-set-key [f3] ') ;; F3 réserver pour les macros ?
;; (global-set-key [C-f3] ')
;; (global-set-key [M-f3] ')
;; (global-set-key [s-f4] ')

;; (global-set-key [f4] ') ;; réserver pour les macros ?
;; (global-set-key [C-f4] 'uncomment-region) ;; Décommenter une région
;; Sous Gnome, M-f4 ferme la fenêtre !
;; (global-set-key [s-f4] ')


;; (global-set-key [C-f5] ')
;; (global-set-key [M-f5] ')
;; (global-set-key [s-f5] ')


;; (global-set-key [C-f6] ')
;; (global-set-key [M-f6] ')
;; (global-set-key [s-f6] ')


;; (global-set-key [C-f7] ')
;; Sous Gnome, M-f7 active le déplacement de la fenêtre
;; (global-set-key [s-f7] ')


;; (global-set-key [C-f8] ') ;; recharger automatiquement le buffer
;; Sous Gnome, M-f8 active le redimensionnement à partir du bord haut gauche de la fenête
;; (global-set-key [s-f8] ')

;; F3 activates the macro definition
;; (global-set-key [s-f9] ')

;; F10 opens the Global menu as Ctrl+Left clic
;; (global-set-key [C-f10] ')
;; M-f10 resizes the frame
;; (global-set-key [s-f10] ')

;; (global-set-key [f11] ')
;; (global-set-key [C-f11] ')
;; (global-set-key [M-f11] ')
;; (global-set-key [s-f11] ') ;; Sur Gnome, mettre en plein écran


;; (global-set-key [C-f12] ') ;; Imprimer le buffer en conservant la coloration syntaxique
;; (global-set-key [M-f12] ')

#+end_src

** Aliases
#+begin_src elisp
  ;;; Définition d'alias pour des fonctions régulièrement utilisées
(defalias 'ac 'align-current)			 ;; Aligner les symboles détectés dans la zone courante.
(defalias 'afm 'auto-fill-mode)			 ;; Active le renvoi à la ligne automatiquement.
(defalias 'afv 'add-file-local-variable)	 ;; Ajoute des variables locales interprétées par emacs.
(defalias 'ar 'align-regexp)			 ;; Aligner verticalement en fonction de rexexp.
(defalias 'eb 'eval-buffer)			 ;; Évaluer le buffer courant.
(defalias 'ic 'insert-char)			 ;; Insérer un caractère unicode.
(defalias 'mef 'make-empty-file)                 ;; Équivalent de touch dans emacs
(defalias 'orcbe 'org-ref-clean-bibtex-entry)	 ;; Nettoye le bibtex
(defalias 'rb 'revert-buffer-no-confirm)	 ;; Recharger le buffer sans demander de confirmation.
(defalias 'rfb 'rename-file-and-buffer)		 ;; Explicite, compatible git
(defalias 'sfn 'set-frame-name)			 ;; Modifier le nom de la fenêtre courante.
(defalias 'sir 'string-insert-rectangle)	 ;; Insèrer une chaîne de caractère dans la sélection rectangle.
(defalias 'ttl 'toggle-truncate-lines)		 ;; Active ou désactive le retour à la ligne en bord de buffer.
(defalias 'wc 'whitespace-cleanup)		 ;; Supprimer les espaces en fin de ligne.
(defalias 'wss 'window-swap-states)		 ;; Intervertie les deux buffers
#+end_src

** Outils
*** Which key
#+begin_src elisp
(use-package which-key
  :config
  ;; Allow C-h to trigger which-key before it is done automatically
  (setq which-key-show-early-on-C-h t)
  ;; make sure which-key doesn't show normally but refreshes quickly after it is
  ;; triggered.
					;(setq which-key-idle-delay 10000)
					;(setq which-key-idle-secondary-delay 0.05)
  (which-key-mode))

#+end_src
*** BookmarkPlus
#+begin_src elisp
(add-to-list 'load-path (concat user-emacs-directory "mylisp/bookmarkplus"))
(require 'bookmark+)
#+end_src

*** Eldoc
On rajoute le crochet à Eglot
#+begin_src elisp
(use-package eldoc-box
  :ensure t)
#+end_src
*** Modeline
#+begin_src elisp :tangle no
(use-package doom-modeline
  :ensure t
  :hook
  (after-init . doom-modeline-mode)
  :config
  ;; (setq doom-modeline-height 20)
  (setq doom-modeline-buffer-file-name-style 'truncate-except-project)
  ;; :custom-face
  ;; (mode-line ((t (:height 0.95)))
  )
#+end_src

#+begin_src elisp
(use-package moody
  :ensure t
  :config
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode)
  (moody-replace-eldoc-minibuffer-message-function)
  (setq moody-mode-line-height 20))
(require 'moody)
;; (set-face-attribute 'mode-line nil :box nil)
;; (set-face-attribute 'mode-line-inactive nil :box nil)
#+end_src

*** ediff
#+begin_src elisp
(defun my-kill-ediff-buffers ()
  "Kill the ediff buffers."
  (kill-buffer ediff-buffer-A)
  (kill-buffer ediff-buffer-B)
  (kill-buffer ediff-buffer-C))

(defun my-ediff-quit-hook ()
  "Function to run when quitting Ediff."
  (ediff-cleanup-mess)
  ;(winner-undo) ; Restore the previous window configuration
  (my-kill-ediff-buffers)
  (delete-frame))

;; Add the custom function to ediff-quit-hook
(add-hook 'ediff-quit-hook 'my-ediff-quit-hook)

(use-package ediff
  :config
  (setq ediff-split-window-function 'split-window-horizontally) ;; side-by-side ediff
  (setq ediff-diff-options "-w") ;; ignoring whitespace
  (setq ediff-auto-refine 'on)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain) ;; ediff in minibuffer

  :hook
  (ediff-quit . my-ediff-quit-hook)
  )
#+end_src
*** wgrep
#+begin_src elisp
(use-package wgrep)
#+end_src

Le readme :
#+begin_quote
You can edit the text in the *grep* buffer after typing `C-c C-p`.
After that the changed text is highlighted.
The following keybindings are defined:

- `C-c C-e` :: Apply the changes to file buffers.
- `C-c C-u` :: All changes are unmarked and ignored.
- `C-c C-d` :: Mark as delete to current line (including newline).
- `C-c C-r` :: Remove the changes in the region (these changes are not
  applied to the files. Of course, the remaining changes can still be
  applied to the files.)
- `C-c C-p` :: Toggle read-only area.
- `C-c C-k` :: Discard all changes and exit.
- `C-x C-q` :: Exit wgrep mode.
- To save all buffers that wgrep has changed, run
    M-x wgrep-save-all-buffers
- To save buffer automatically when `wgrep-finish-edit'.
    (setq wgrep-auto-save-buffer t)
- You can change the default key binding to switch to wgrep.
    (setq wgrep-enable-key "r")
- To apply all changes regardless of whether or not buffer is read-only.
    (setq wgrep-change-readonly-file t)
#+end_quote
*** Symbol overlay
J'utilise un autre système, symbol-overlay
#+begin_src elisp :tangle no
;(use-package highlight-symbol)
#+end_src

#+begin_src elisp
(use-package symbol-overlay
  :ensure t)
#+end_src

*** Casual for calc
#+begin_src elisp
;; Transient for calc !!!
(use-package casual
  :ensure t
  :bind (:map calc-mode-map ("C-o" . 'casual-calc-tmenu)))
#+end_src
*** YAML
#+begin_src elisp
(use-package flymake-yamllint
  :hook
  (yaml-mode . flymake-yamllint-setup))
(use-package yaml-mode
  :hook
  (yaml-mode . flymake-mode))
#+end_src
*** Transient for isearch
#+begin_src elisp :tangle no
(use-package cc-isearch-menu
  :ensure t
  )
(require 'cc-isearch-menu)
(define-key isearch-mode-map (kbd "<f6>") 'cc-isearch-menu-transient)
#+end_src
*** Casual avy
Avy est une dépendance de org-ref
#+begin_src elisp :tangle no
(use-package casual-avy
  :ensure t
  :bind ("M-g" . casual-avy-tmenu))
#+end_src
*** Edit tag
#+begin_src elisp :tangle no
(add-to-list 'load-path (concat user-emacs-directory "mylisp/"))
(require 'tag-edit-mode)
#+end_src
*** Édition dans firefox/chrome avec emacs
#+begin_src elisp
(use-package atomic-chrome
  :ensure t)
(atomic-chrome-start-server)
#+end_src
*** Shellcheck
#+begin_src elisp
(use-package flymake-shellcheck
  :commands flymake-shellcheck-load
  :init
  (add-hook 'sh-mode-hook 'flymake-shellcheck-load)
  :config
  (sh-shellcheck-arguments . '("-e" "1090")))
#+end_src
** Styling: theme and icons
Des icônes
#+begin_src elisp
(use-package nerd-icons
  :ensure t)

;; (use-package nerd-icons-completion
;;   :ensure t
;;   :after marginalia
;;   :config
;;   (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
;;
;; (use-package nerd-icons-corfu
;;   :ensure t
;;   :after corfu
;;   :config
;;   (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

(use-package nerd-icons-dired
  :ensure t
  :hook
  (dired-mode . nerd-icons-dired-mode))

#+end_src
** Dired
#+begin_src elisp
;; Dired options
(require 'dired)
(define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file) ; was dired-advertised-find-file
(define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-directory
(setq dired-listing-switches "-lBgoFh --group-directories-first")
(put 'dired-find-alternate-file 'disabled nil)
(use-package casual-dired
  :ensure t
  :bind (:map dired-mode-map ("C-o" . 'casual-dired-tmenu)))
;; (use-package dired-x
;;   :ensure t)

;; (use-package dired-x
;;     :init (setq-default dired-omit-files-p t)
;;     :config
;;     (add-to-list 'dired-omit-extensions ".toto"))
;; (use-package dired-aux) ;; pour les droits chmod
;; (use-package wdired) ;; permet d'éditer le buffer dired avec C-x C-q puis valider avec
#+end_src
** Navigation
*** Ivy + Swiper + Counsel
The old way
*** Vertico + Consult + Orderless + Embark + Marginalia + Corfu
The new way

**** Vertico
#+begin_src elisp
;; Enable vertico
(use-package vertico
  :ensure t
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)

  :bind
  (:map vertico-map
	("C-M-n" . vertico-next-group)
	("C-M-p" . 'vertico-previous-group)))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :ensure t
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src

**** Orderless
De la configuration du repo github
#+begin_src elisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

De la configuration de Vertico
#+begin_src elisp
;; Optionally use the `orderless' completion style.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

**** Marginalia
Du dépôt github
#+begin_src elisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  :ensure t
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src

**** Embark
Du dépôt github
#+begin_src elisp
(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target) ;; commenté pour ne pas avoir le message!
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

**** Consult
config de base du dépôt github
#+begin_src elisp
;; Example configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)                  ;; Alternative: consult-fd
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("C-s" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Tweak the register preview for `consult-register-load',
  ;; `consult-register-store' and the built-in commands.  This improves the
  ;; register formatting, adds thin separator lines, register sorting and hides
  ;; the window mode line.
  (advice-add #'register-preview :override #'consult-register-window)
  (setq register-preview-delay 0.5)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
)
#+end_src

On ajoute consult-dir
#+begin_src elisp
(use-package consult-dir
  :ensure t
  :config
  (define-key minibuffer-local-completion-map (kbd "C-x C-d") #'consult-dir)
  (define-key minibuffer-local-completion-map (kbd "C-x C-j") #'consult-dir-jump-file)
  (define-key global-map (kbd "C-x C-d") #'consult-dir))
#+end_src

**** Corfu
Depuis le dépôt github
#+begin_src elisp
(use-package corfu
  :ensure t
  ;; Optional customizations
  :custom
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  :hook ((prog-mode . corfu-mode)
         (shell-mode . corfu-mode)
         (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `corfu-exclude-modes'.
  :init
  (global-corfu-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))

;; Use Dabbrev with Corfu!
(use-package dabbrev
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand))
  ;; Other useful Dabbrev configurations.
  :custom
  (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))
#+end_src

** Yasnippet
#+begin_src elisp
  (use-package yasnippet
    :ensure
    :diminish yas-minor-mode
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-reload-all))

  (use-package yasnippet-snippets
    :defer t
    :after yasnippet)
#+end_src
** Fuzzy-finder
#+begin_src elisp
(use-package affe
  :config
  ;; Manual preview key for `affe-grep'
  (consult-customize affe-grep :preview-key "M-."))
(defun affe-orderless-regexp-compiler (input _type _ignorecase)
  (setq input (orderless-pattern-compiler input))
  (cons input (apply-partially #'orderless--highlight input)))
(setq affe-regexp-compiler #'affe-orderless-regexp-compiler)
#+end_src
** Mise en forme code
#+begin_src elisp
(use-package rainbow-delimiters
  :ensure t)
(use-package highlight-indent-guides
  :ensure t
  :config
  (setq highlight-indent-guides-method 'bitmap))
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
(add-hook 'prog-mode-hook #'highlight-indent-guides-mode)
(add-hook 'prog-mode-hook #'hs-minor-mode)
#+end_src

** Magit
#+begin_src elisp
(use-package magit
  :ensure t)
#+end_src

** Org
Minimaliste org config
#+begin_src elisp
(setq org-directory "~/ORG/")
;; (add-hook 'org-mode-hook (lambda () (linum-mode 0)))
(define-key global-map "\C-cl" 'org-store-link)

;; Plus très sûr d'en avoir besoin
;;(define-key org-mode-map (kbd "<return>") 'org-return-and-maybe-indent);;(lambda (interactive) (org-return nil)))

(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t ;; pas d'indentation dans les blocs
      org-src-tab-acts-natively t
      org-adapt-indentation nil
      org-log-done t
      org-export-in-background nil
      org-confirm-babel-evaluate nil)

(setq org-latex-compiler "lualatex")
(setq org-latex-pdf-process (list "latexmk -pdflatex=lualatex -f -pdf %f"))

;; Ajout de mots-clés
(setq org-todo-keywords
      '((sequence "TODO(t)" "IN-PROGRESS(i)" "BUY(b)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c)")))

;; Activer les speed commands
(require 'org-tempo)
(add-to-list 'org-structure-template-alist
	     '("b" . "src bibtex"))

;; Pas d'expansion de <> en org
(add-hook 'org-mode-hook (lambda ()
			   (setq-local electric-pair-inhibit-predicate
				       `(lambda (c)
					  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

;; Langage exécuté dans org-mode
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (makefile . t)
   (python . t)
   (shell . t)
   (C . t)))

(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/ORG/GTD.org" "Tasks")
         "** TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/ORG/Journal.org")
         "* %?\n %i\n")))

#+end_src

#+begin_src elisp
(use-package org-ref
  :ensure t
  :config
  (setq doi-utils-download-pdf nil))

(use-package async) ; pour org-ref
#+end_src
*** Caldav
Installation du paquet
#+begin_src elisp
(use-package org-caldav
  :config
  (setq org-caldav-url "https://webmail.gandi.net/SOGo/dav/alan@burlot.bzh/Calendar/"
        org-caldav-inbox "~/MYCONFIG/EMACS-CONF/ORG-CALDAV/mycaldav.org"
        org-icalendar-include-todo 'all
        org-caldav-sync-todo t)
  (setq org-caldav-calendars
      '((:calendar-id "https://webmail.gandi.net/SOGo/dav/alan@burlot.bzh/Calendar/"
                      :files ("~/MYCONFIG/EMACS-CONF/ORG-CALDAV/mycaldav.org")
                      :inbox "~/MYCONFIG/EMACS-CONF/ORG-CALDAV/toto.org")))
  )
#+end_src
** Prog modes
*** Custom
#+begin_src elisp
(use-package indent-bars
  :ensure t
  :hook
  (prog-mode . indent-bars-mode))

#+end_src
*** Eglot et projectile
#+begin_src elisp
(use-package eglot
  :ensure t
  :hook
  (prog-mode . eglot-ensure)
  (eglot-managed-mode . eldoc-box-hover-mode)
  :config
  (add-to-list 'eglot-server-programs '((c++-mode c-mode) . ("clangd" "--clang-tidy")))
  :bind
  ("<f7>" . eglot-rename))
(define-key prog-mode-map (kbd "C-c e") 'eglot-code-actions)
#+end_src

#+begin_src elisp
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map))
  :config
  (setq projectile-project-search-path '("~/ORG/" "~/GIT/"))
  (setq projectile-per-project-compilation-buffer t))

(setq my-projectile-safe-variables '(projectile-project-name
                                     projectile-project-compilation-cmd
                                     projectile-project-run-cmd
                                     projectile-project-test-cmd
                                     projectile-project-package-cmd
                                     projectile-project-install-cmd
                                     projectile-project-configure-cmd))
(dolist (var my-projectile-safe-variables)
  (put var 'safe-local-variable #'stringp))
#+end_src

#+begin_src elisp
(use-package projectile-ripgrep
  :ensure t)
#+end_src
*** C/C++
#+begin_src elisp
;; Pour le C++
(add-to-list 'auto-mode-alist '("\\.tpp\\'" . c++-mode))
(add-hook 'c-mode-common-hook
          (lambda ()
            (define-key c-mode-base-map (kbd "C-c RET") #'recompile)
            (define-key c-mode-base-map (kbd "C-c o") 'ff-get-other-file)))
(add-hook 'cc-mode-common-hook #'hs-minor-mode)

#+end_src
*** Python
#+begin_src elisp
;; Python config
#+end_src

#+begin_src elisp
(use-package pyvenv
  :ensure t
  :config
  (pyvenv-mode t)
  (pyvenv-activate "/home/alan/MYCONFIG/EMACS-CONF/VPY/")
  (python-indent-offset . 4))

(global-set-key [C-\<] 'python-indent-shift-left)
(global-set-key [C-\>] 'python-indent-shift-right)

#+end_src

Mon bon ein
#+begin_src elisp
(use-package ein)
#+end_src

** Latex
#+begin_src elisp
;; Charger le fichier auctex au démarrage
(use-package auctex
  :defer t)
(load "auctex.el" nil t t)
(load "preview.el" nil t t)

;; (require 'auto-complete-auctex)
;; Les crochets
(add-hook 'LaTeX-mode-hook 'rainbow-delimiters-mode) ;; Colore les parenthèses
(add-hook 'LaTeX-mode-hook 'flyspell-mode) ;; Active la correction à la volée
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode) ;; Active le mode math en latex
(add-hook 'LaTeX-mode-hook 'turn-on-reftex) ;; Active reftex
(add-hook 'LaTeX-mode-hook 'outline-minor-mode) ;; Permet de masquer des sections
(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

;; Les variables
(setq TeX-PDF-mode t)
(setq TeX-save-query nil) ;; sauvegarde automatique quand C-c C-a
(setq TeX-auto-save nil)
(setq TeX-parse-self t)
(setq-default TeX-master t) ;; fichier courant est le maître par défaut
(setq LaTeX-biblatex-use-Biber t) ;; Force l'utilisation de biber
(setq TeX-clean-confirm nil)
(setq reftex-plug-into-AUCTeX t)
(setq reftex-default-bibliography '("/home/alan/PHILOSOPHIE/NOTES/BiblioPhilo.bib"))
(setq reftex-bibpath-environment-variables '("/home/alan/PHILOSOPHIE/NOTES/BiblioPhilo.bib"))
(setq-default TeX-engine 'luatex)


;; Ajouter une espace insécable
(setq reftex-cite-format
      '((?\C-m . "~\\cite[]{%l}")
	(?\[ . "~\\cite[]{%l}")
	(?t    . "\\textcite[]{%l}")
	(?f    . "\\fullcite[]{%l}")))


;; Paramètre pour le mode Bibtex
;; Association automatique d'un mode avec une extension particulière
(add-to-list 'auto-mode-alist '("\\.bibtex\\'" . bibtex-mode))
(setq bibtex-align-at-equal-sign t
      bibtex-autokey-year-length 4
      bibtex-autokey-name-year-separator ""
      bibtex-autokey-year-title-separator ""
      bibtex-autokey-titleword-separator ""
      bibtex-autokey-titleword-length 0
      bibtex-autokey-titlewords-stretch 0
      bibtex-autokey-titlewords 0
      bibtex-autokey-name-case-convert-function (quote capitalize))

;; Compter le nombre de mots et caractères
(defun latex-word-count ()
  (interactive)
  (shell-command (concat "texcount "
			 "-unicode " ;; encodage utf8
			 "-inc " ;; compter dans les input et include
			 (buffer-file-name)
			 " | \grep 'Words in text' | tail -1 && "
			 "texcount "
			 "-unicode " ;; encodage utf8
			 "-inc "
			 "-char " ;; compter les lettres
			 (buffer-file-name)
			 " | \grep 'Letters in text' | tail -1"
			 )))

;; Des raccourcis pour latex
(define-key LaTeX-mode-map "\C-cw" 'latex-word-count)
(define-key LaTeX-mode-map [C-tab] 'outline-toggle-children)

#+end_src
** LLM mode
clef gemini : AIzaSyCf5HoeL0Ys5DDn1cV6Ka8ErjXGt-cC8tI
*** gptel
#+begin_src elisp
(use-package gptel
  :ensure t
  :config
  ;; OPTIONAL configuration
  (setq gptel-model "codellama:latest"
        gptel-backend (gptel-make-ollama "Ollama"
                        :host "localhost:11434"
                        :models '("codellama:latest" "mistral:latest")
                        :stream t))
  (setq gptel-default-mode 'org-mode)
  ;(setq gptel-post-response-functions 'org-fill-paragraph)
  :hook
  (gptel-post-response-functions . 'org-fill-paragraph))

#+end_src
*** ellama
#+begin_src elisp
(use-package ellama
  :config
  (setq ellama-language "English")
  (setq ellama-model "codellama")
  (setq ellama-providers
        '(("codellama" . (make-llm-ollama
        		  :chat-model "codellama:latest"
        		  :embedding-model "codellama:latest"))
          ("zephyr" . (make-llm-ollama
        	       :chat-model "zephyr:latest"
        	       :embedding-model "zephyr:latest"))))
  )

;; (use-package ellama
;;   :init
;;   (setopt ellama-language "English")
;;   (require 'llm-ollama)
;;   (setopt ellama-provider
;; 	  (make-llm-ollama
;; 	   :chat-model "mistral:7b-instruct-v0.2-q6_K"
;;            :embedding-model "mistral:7b-instruct-v0.2-q6_K"))
;;   ;; Predefined llm providers for interactive switching.
;;   ;; You shouldn't add ollama providers here - it can be selected interactively
;;   ;; without it. It is just example.
;;   (setopt ellama-providers
;; 	  '(("zephyr" . (make-llm-ollama
;; 			 :chat-model "zephyr:7b-beta-q6_K"
;; 			 :embedding-model "zephyr:7b-beta-q6_K"))
;; 	    ("mistral" . (make-llm-ollama
;; 			  :chat-model "mistral:7b-instruct-v0.2-q6_K"
;; 			  :embedding-model "mistral:7b-instruct-v0.2-q6_K"))
;; 	    ("mixtral" . (make-llm-ollama
;; 			  :chat-model "mixtral:8x7b-instruct-v0.1-q3_K_M-4k"
;; 			  :embedding-model "mixtral:8x7b-instruct-v0.1-q3_K_M-4k")))))
#+end_src
*** aidermacs
#+begin_src elisp :tangle no
(use-package aidermacs
  ;; :bind (("C-c a" . aidermacs-transient-menu))
  :config
  ; Set API_KEY in .bashrc, that will automatically picked up by aider or in elisp
  ;; (setenv "ANTHROPIC_API_KEY" "sk-...")
  ; defun my-get-openrouter-api-key yourself elsewhere for security reasons
  ;; (setenv "OPENROUTER_API_KEY" (my-get-openrouter-api-key))
  :custom
  ; See the Configuration section below
  (aidermacs-use-architect-mode t)
  (aidermacs-default-model "sonnet"))
#+end_src
** Mastodon

#+begin_src elisp
(use-package mastodon
  :config
  (setq mastodon-active-user "alan")
  (setq mastodon-instance-url "https://piaille.fr"))
#+end_src

** Dernier bloc
#+begin_src elisp
;; Dernier bloc

;; Start the server only if not already running
(require 'server)
(unless (server-running-p)
  (message " = Activation du serveur")
  (server-start))

(add-hook 'emacs-startup-hook
	  (lambda ()
	    (cd "/home/alan")
	    (ansi-term "/bin/bash" "ANSI-TERM") ;; création d'un buffer terminal
            (bookmark-bmenu-list)
	    (switch-to-buffer "*Bookmark List*")))

(provide 'myinit29)
  ;;; myinit29.el ends here
#+end_src

** Options
#+STARTUP:content
# Local Variables:
# after-save-hook: org-babel-tangle
# End:
